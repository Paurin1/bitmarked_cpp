/*
	Copyright (c) 2019 Maciej Goncerz <https://github.com/Paurin1>.
	Licensed under the MIT License <http://opensource.org/licenses/MIT>.

	More detailed descriptions are in PythonNet.h file.
*/

#include "PythonNet.h"

// defines which python executable will be used to execute python script
// may vary depending on your system settings, i.e. python, C:/fullPath/python.exe, etc.
const std::string python_path = "C:\\Users\\Paurin\\AppData\\Local\\Programs\\Python\\Python37-32\\python.exe";

PythonNet::PythonNet()
{ }

PythonNet::PythonNet(std::string _pyPath, std::string _pyFile) 
	: 
	m_pyPath(_pyPath), 
	m_pyFile(_pyFile)
{ }

std::string PythonNet::get(std::string _url)
{
	// check whether both required variables are already set
	if (m_pyPath.empty() || m_pyFile.empty())
		return std::string();

	// execute python script and catch the its return code
	int _ret = system((python_path + " " + m_pyPath + "/" + m_pyFile + " " + _url).c_str());

	// if it's equal to ZERO then the python script has finished correctly
	if (_ret)
		return std::string();

	// open the file python script outputted
	std::ifstream _inFileStream("python_json_output");

	// check if it's opened correctly
	if (_inFileStream.is_open() == false)
		return std::string();

	// transfer it's data into _fileData string and close
	std::string _fileData((std::istreambuf_iterator<char>(_inFileStream)), std::istreambuf_iterator<char>());
	_inFileStream.close();

	// return data generated by python script
	return _fileData;
}

std::string PythonNet::post(std::string _url, std::string _params, std::string _headers)
{
	// check whether both required variables are already set
	if (m_pyPath.empty() || m_pyFile.empty())
		return std::string();

	// execute python script and catch the its return code
	int _ret = system((python_path + " " + m_pyPath + "/" + m_pyFile + " " + _url + " \"" + _params + "\" \"" + _headers + "\"").c_str());

	// if it's equal to ZERO then the python script has finished correctly
	if (_ret)
		return std::string();

	// open the file python script outputted
	std::ifstream _inFileStream("python_json_output");

	// check if it's opened correctly
	if (_inFileStream.is_open() == false)
		return std::string();

	// transfer it's data into _fileData string and close
	std::string _fileData((std::istreambuf_iterator<char>(_inFileStream)), std::istreambuf_iterator<char>());
	_inFileStream.close();

	// return data generated by python script
	return _fileData;
}
